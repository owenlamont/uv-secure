from pathlib import Path
from textwrap import dedent

from anyio import Path as APath
import pytest

from uv_secure.package_info import Dependency, parse_requirements_txt_file


@pytest.mark.asyncio
@pytest.mark.parametrize(
    ("requirements_txt_contents", "expected_dependencies"),
    [
        pytest.param("", [], id="No dependencies"),
        pytest.param(
            """
            # This file was autogenerated by uv via the following command:
            #    uv pip compile requirements.in -o requirements.txt
            humanize==4.12.0
                # via -r requirements.in
            """,
            [Dependency(name="humanize", version="4.12.0", first_order=True)],
            id="First order from requirements.in",
        ),
        pytest.param(
            """
            # This file was autogenerated by uv via the following command:
            #    uv pip compile requirements.in -o requirements.txt
            anyio==4.8.0
                # via httpx
            certifi==2025.1.31
                # via
                #   httpcore
                #   httpx
            colorama==0.4.6
                # via pytest
            h11==0.14.0
                # via httpcore
            httpcore==1.0.7
                # via httpx
            httpx==0.28.1
                # via
                #   -r requirements.in
                #   pytest-httpx
            humanize==4.12.0
                # via -r requirements.in
            idna==3.10
                # via
                #   anyio
                #   httpx
            iniconfig==2.0.0
                # via pytest
            packaging==24.2
                # via pytest
            pluggy==1.5.0
                # via pytest
            pytest==8.3.4
                # via pytest-httpx
            pytest-httpx==0.35.0
                # via -r requirements.in
            sniffio==1.3.1
                # via anyio
            """,
            [
                Dependency(name="anyio", version="4.8.0", first_order=False),
                Dependency(name="certifi", version="2025.1.31", first_order=False),
                Dependency(name="colorama", version="0.4.6", first_order=False),
                Dependency(name="h11", version="0.14.0", first_order=False),
                Dependency(name="httpcore", version="1.0.7", first_order=False),
                Dependency(name="httpx", version="0.28.1", first_order=True),
                Dependency(name="humanize", version="4.12.0", first_order=True),
                Dependency(name="idna", version="3.10", first_order=False),
                Dependency(name="iniconfig", version="2.0.0", first_order=False),
                Dependency(name="packaging", version="24.2", first_order=False),
                Dependency(name="pluggy", version="1.5.0", first_order=False),
                Dependency(name="pytest", version="8.3.4", first_order=False),
                Dependency(name="pytest-httpx", version="0.35.0", first_order=True),
                Dependency(name="sniffio", version="1.3.1", first_order=False),
            ],
            id="First order and transitive dependencies from requirements.in",
        ),
        pytest.param(
            """
            # This file was autogenerated by uv via the following command:
            #    uv pip compile pyproject.toml --extra dev -o requirements.txt
            humanize==4.12.0
                # via test-uv-lock (pyproject.toml)
            """,
            [Dependency(name="humanize", version="4.12.0", first_order=True)],
            id="First order from pyproject.toml",
        ),
        pytest.param(
            """
            # This file was autogenerated by uv via the following command:
            #    uv pip compile pyproject.toml --extra dev -o requirements.txt
            anyio==4.8.0
                # via httpx
            certifi==2025.1.31
                # via
                #   httpcore
                #   httpx
            colorama==0.4.6
                # via pytest
            h11==0.14.0
                # via httpcore
            httpcore==1.0.7
                # via httpx
            httpx==0.28.1
                # via
                #   test-uv-lock (pyproject.toml)
                #   pytest-httpx
            humanize==4.12.0
                # via test-uv-lock (pyproject.toml)
            idna==3.10
                # via
                #   anyio
                #   httpx
            iniconfig==2.0.0
                # via pytest
            packaging==24.2
                # via pytest
            pluggy==1.5.0
                # via pytest
            pytest==8.3.4
                # via pytest-httpx
            pytest-httpx==0.35.0
                # via test-uv-lock (pyproject.toml)
            sniffio==1.3.1
                # via anyio
            """,
            [
                Dependency(name="anyio", version="4.8.0", first_order=False),
                Dependency(name="certifi", version="2025.1.31", first_order=False),
                Dependency(name="colorama", version="0.4.6", first_order=False),
                Dependency(name="h11", version="0.14.0", first_order=False),
                Dependency(name="httpcore", version="1.0.7", first_order=False),
                Dependency(name="httpx", version="0.28.1", first_order=True),
                Dependency(name="humanize", version="4.12.0", first_order=True),
                Dependency(name="idna", version="3.10", first_order=False),
                Dependency(name="iniconfig", version="2.0.0", first_order=False),
                Dependency(name="packaging", version="24.2", first_order=False),
                Dependency(name="pluggy", version="1.5.0", first_order=False),
                Dependency(name="pytest", version="8.3.4", first_order=False),
                Dependency(name="pytest-httpx", version="0.35.0", first_order=True),
                Dependency(name="sniffio", version="1.3.1", first_order=False),
            ],
            id="First order and transitive dependencies from pyproject.toml",
        ),
    ],
)
async def test_parse_requirements_txt_file(
    tmp_path: Path,
    requirements_txt_contents: str,
    expected_dependencies: list[Dependency],
) -> None:
    requirements_txt_path = tmp_path / "requirements.txt"
    requirements_txt_path.write_text(dedent(requirements_txt_contents).strip())
    dependencies = await parse_requirements_txt_file(APath(requirements_txt_path))
    assert dependencies == expected_dependencies
