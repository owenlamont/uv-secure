import asyncio
import re
from typing import Optional, Union

from hishel import AsyncCacheClient, AsyncFileStorage
from pydantic import BaseModel, EmailStr, HttpUrl

from uv_secure.package_info.dependency_file_parser import Dependency


class Downloads(BaseModel):
    last_day: Optional[int] = None
    last_month: Optional[int] = None
    last_week: Optional[int] = None


class Info(BaseModel):
    author: Optional[str] = None
    author_email: str
    bugtrack_url: Optional[HttpUrl] = None
    classifiers: list[str]
    description: str
    description_content_type: str
    docs_url: Optional[HttpUrl] = None
    download_url: Optional[HttpUrl] = None
    downloads: Downloads
    dynamic: Optional[str] = None
    home_page: Optional[HttpUrl] = None
    keywords: Optional[Union[str, list[str]]] = None
    license: Optional[str] = None
    license_expression: Optional[str] = None
    license_files: Optional[list[str]] = None
    maintainer: Optional[str] = None
    maintainer_email: Optional[EmailStr] = None
    name: str
    package_url: Optional[HttpUrl] = None
    platform: Optional[str] = None
    project_url: Optional[HttpUrl] = None
    project_urls: dict[str, HttpUrl]
    provides_extra: list[str]
    release_url: str
    requires_dist: Optional[list[str]] = None
    requires_python: str
    summary: str
    version: str
    yanked: bool
    yanked_reason: Optional[str] = None


class Digests(BaseModel):
    blake2b_256: str
    md5: str
    sha256: str


class Url(BaseModel):
    comment_text: str
    digests: Digests
    downloads: int
    filename: str
    has_sig: bool
    md5_digest: str
    packagetype: str
    python_version: str
    requires_python: str
    size: int
    upload_time: str
    upload_time_iso_8601: str
    url: str
    yanked: bool
    yanked_reason: Optional[str] = None


class Vulnerability(BaseModel):
    id: str
    details: str
    fixed_in: Optional[list[str]] = None
    aliases: Optional[list[str]] = None
    link: Optional[str] = None
    source: Optional[str] = None
    summary: Optional[str] = None
    withdrawn: Optional[str] = None


class Package(BaseModel):
    info: Info
    last_serial: int
    urls: list[Url]
    vulnerabilities: list[Vulnerability]


def _canonicalize_name(name: str) -> str:
    """Converts a package name to its canonical form for PyPI URLs"""
    return re.sub(r"[_.]+", "-", name).lower()


async def _download_package(
    client: AsyncCacheClient, dependency: Dependency, disable_cache: bool
) -> Package:
    """Queries the PyPi JSON API for vulnerabilities of a given dependency."""
    canonical_name = _canonicalize_name(dependency.name)
    url = f"https://pypi.org/pypi/{canonical_name}/{dependency.version}/json"
    response = await client.get(
        url, extensions={"cache_disabled": True} if disable_cache else None
    )
    response.raise_for_status()
    return Package(**response.json())


async def download_packages(
    dependencies: list[Dependency], storage: AsyncFileStorage, disable_cache: bool
) -> list[Union[Package, BaseException]]:
    """Fetch vulnerabilities for all dependencies concurrently."""
    async with AsyncCacheClient(timeout=10, storage=storage) as client:
        tasks = [_download_package(client, dep, disable_cache) for dep in dependencies]
        return await asyncio.gather(*tasks, return_exceptions=True)
